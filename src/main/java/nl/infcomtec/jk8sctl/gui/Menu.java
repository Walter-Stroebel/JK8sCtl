/*
 *  Copyright (c) 2018 by Walter Stroebel and InfComTec.
 */
package nl.infcomtec.jk8sctl.gui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.AbstractTableModel;
import nl.infcomtec.jk8sctl.CollectorUpdate;
import nl.infcomtec.jk8sctl.Global;
import nl.infcomtec.jk8sctl.K8sCondition;
import nl.infcomtec.jk8sctl.K8sCtlCfg;
import nl.infcomtec.jk8sctl.K8sStatus;
import nl.infcomtec.jk8sctl.Maps;
import nl.infcomtec.jk8sctl.Metadata;

/**
 *
 * @author walter
 */
public class Menu extends javax.swing.JFrame implements CollectorUpdate {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        setAlwaysOnTop(Global.getConfig().getModBoolean("menu.alwaysontop", true, true));
        if (!Global.getConfig().restoreWindowPositionAndSize("menu.window", this)) {
            Global.getConfig().saveWindowPositionAndSize("menu.window", this);
        }
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                try {
                    Maps.collect();
                } catch (Exception ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }, 1, 10, TimeUnit.SECONDS);
        Maps.doUpdate(this);
    }

    private static class StatusTableModel extends AbstractTableModel {

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Component";
                case 1:
                    return "Kind";
                case 2:
                    return "Condition";
                case 3:
                    return "Status";
                case 4:
                    return "Age";
            }
            return "?";
        }

        ArrayList<String[]> content = new ArrayList<>();

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return String.class;
        }

        @Override
        public int getRowCount() {
            return content.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return content.get(rowIndex)[columnIndex];
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statusTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnSelectCluster = new javax.swing.JMenuItem();
        mnCreateApp = new javax.swing.JMenuItem();
        mnDeleteItem = new javax.swing.JMenuItem();
        mnExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnDebug = new javax.swing.JMenuItem();
        mnDiagram = new javax.swing.JMenuItem();
        mnResources = new javax.swing.JMenuItem();
        chShowAllConditions = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnYamlEditor = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        mnLoadConfig = new javax.swing.JMenuItem();
        mnSaveConfig = new javax.swing.JMenuItem();
        mnResetConfig = new javax.swing.JMenuItem();
        mnEditConfig = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kubernetes Tools by InfComTec");
        setAlwaysOnTop(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        statusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Component", "Kind", "Condition", "Status", "Age"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statusTable);

        jMenu1.setText("Cluster");

        mnSelectCluster.setText("Select...");
        mnSelectCluster.setToolTipText("Select a cluster to work with");
        mnSelectCluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSelectClusterActionPerformed(evt);
            }
        });
        jMenu1.add(mnSelectCluster);

        mnCreateApp.setText("Create application...");
        mnCreateApp.setToolTipText("Create a new application (deployment or pod)");
        mnCreateApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCreateAppActionPerformed(evt);
            }
        });
        jMenu1.add(mnCreateApp);

        mnDeleteItem.setText("Delete item...");
        mnDeleteItem.setToolTipText("Delete any cluster item");
        mnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeleteItemActionPerformed(evt);
            }
        });
        jMenu1.add(mnDeleteItem);

        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        mnDebug.setText("Debug...");
        mnDebug.setToolTipText("Shows the entire cluster as a tree");
        mnDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDebugActionPerformed(evt);
            }
        });
        jMenu2.add(mnDebug);

        mnDiagram.setText("Diagram...");
        mnDiagram.setToolTipText("Shows a live diagram of the entire cluster");
        mnDiagram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDiagramActionPerformed(evt);
            }
        });
        jMenu2.add(mnDiagram);

        mnResources.setText("Resources...");
        mnResources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnResourcesActionPerformed(evt);
            }
        });
        jMenu2.add(mnResources);

        chShowAllConditions.setText("Show all conditions");
        chShowAllConditions.setToolTipText("Shows all known conditions");
        jMenu2.add(chShowAllConditions);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");

        mnYamlEditor.setText("YAML editor...");
        mnYamlEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnYamlEditorActionPerformed(evt);
            }
        });
        jMenu3.add(mnYamlEditor);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Configuration");

        mnLoadConfig.setText("Reload configuration");
        mnLoadConfig.setToolTipText("Reload configuration from disk (if changed externally for instance)");
        mnLoadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnLoadConfigActionPerformed(evt);
            }
        });
        jMenu4.add(mnLoadConfig);

        mnSaveConfig.setText("Save configuration");
        mnSaveConfig.setToolTipText("Normally automatic, only needed if changed manually");
        mnSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveConfigActionPerformed(evt);
            }
        });
        jMenu4.add(mnSaveConfig);

        mnResetConfig.setText("Reset configuration");
        mnResetConfig.setToolTipText("Reset configuration to default");
        mnResetConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnResetConfigActionPerformed(evt);
            }
        });
        jMenu4.add(mnResetConfig);

        mnEditConfig.setText("Edit configuration...");
        mnEditConfig.setToolTipText("Manually edit the configuration");
        mnEditConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnEditConfigActionPerformed(evt);
            }
        });
        jMenu4.add(mnEditConfig);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        Global.getConfig().saveWindowPositionAndSize("menu.window", this);
    }//GEN-LAST:event_formComponentResized

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        Global.getConfig().saveWindowPositionAndSize("menu.window", this);
    }//GEN-LAST:event_formComponentMoved

    private void mnSelectClusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSelectClusterActionPerformed
        SelectCluster.main(null);
    }//GEN-LAST:event_mnSelectClusterActionPerformed

    private void mnCreateAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCreateAppActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Application().setVisible(true);
            }
        });
    }//GEN-LAST:event_mnCreateAppActionPerformed

    private void mnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeleteItemActionPerformed
        ItemSelector.select(new SelectedItemAction() {
            @Override
            public String topLine() {
                return "Objects that can be deleted. Warning: can destroy your cluster!";
            }

            @Override
            public boolean withSelected(Metadata item) {
                KubeCtlAction.delete(item);
                return true;
            }
        });
    }//GEN-LAST:event_mnDeleteItemActionPerformed

    private void mnDiagramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDiagramActionPerformed
        Diagram.main(null);
    }//GEN-LAST:event_mnDiagramActionPerformed

    private void mnDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDebugActionPerformed
        if (!Maps.items.isEmpty()) {
            ItemTree.main(new String[]{});
        }
    }//GEN-LAST:event_mnDebugActionPerformed

    private void mnYamlEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnYamlEditorActionPerformed
        YamlEditor.main(null);
    }//GEN-LAST:event_mnYamlEditorActionPerformed

    private void mnResourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnResourcesActionPerformed
        Resources.main(null);
    }//GEN-LAST:event_mnResourcesActionPerformed

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnExitActionPerformed

    private void mnLoadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnLoadConfigActionPerformed
        Global.loadConfig();
    }//GEN-LAST:event_mnLoadConfigActionPerformed

    private void mnSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveConfigActionPerformed
        try {
            Global.getConfig().saveConfig();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
            Logger.getLogger(YamlEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnSaveConfigActionPerformed

    private void mnResetConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnResetConfigActionPerformed
        int ask = JOptionPane.showConfirmDialog(this, "This will also delete all window placements.\nAre you sure?");
        if (ask == JOptionPane.YES_OPTION) {
            try {
                K8sCtlCfg.defaults().saveConfig();
                Global.loadConfig();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
            }
        } else if (ask == JOptionPane.CANCEL_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_mnResetConfigActionPerformed

    private void mnEditConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnEditConfigActionPerformed
        EditText.showText(K8sCtlCfg.getConfigFile(), Global.gson.toJson(Global.getConfig()));
    }//GEN-LAST:event_mnEditConfigActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            Maps.collect();
        } catch (Exception ex) {
            // we tried
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem chShowAllConditions;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnCreateApp;
    private javax.swing.JMenuItem mnDebug;
    private javax.swing.JMenuItem mnDeleteItem;
    private javax.swing.JMenuItem mnDiagram;
    private javax.swing.JMenuItem mnEditConfig;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenuItem mnLoadConfig;
    private javax.swing.JMenuItem mnResetConfig;
    private javax.swing.JMenuItem mnResources;
    private javax.swing.JMenuItem mnSaveConfig;
    private javax.swing.JMenuItem mnSelectCluster;
    private javax.swing.JMenuItem mnYamlEditor;
    private javax.swing.JTable statusTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean update() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                StatusTableModel tm = new StatusTableModel();
                for (Metadata item : Maps.items.values()) {
                    K8sStatus status = item.getStatus();
                    if (!status.okay || chShowAllConditions.isSelected()) {
                        for (K8sCondition c : status.details.values()) {
                            if (c.isAnIssue == K8sCondition.Status.True || chShowAllConditions.isSelected()) {
                                String[] line = new String[5];
                                line[0] = item.getName();
                                line[1] = item.getKind();
                                line[2] = c.type;
                                switch (c.isAnIssue) {
                                    case False:
                                        line[3] = c.status.toString() + " (ok)";
                                        break;
                                    case Unknown:
                                        line[3] = c.status.toString() + " (?)";
                                        break;
                                    case True:
                                        line[3] = c.status.toString() + " (!)";
                                        break;
                                }
                                line[4] = c.lastUpdateAge;
                                tm.content.add(line);
                            }
                        }
                    }
                }
                statusTable.setModel(tm);
            }
        });
        return true;
    }
}
