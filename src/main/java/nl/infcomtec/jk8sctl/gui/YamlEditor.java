/*
 *  Copyright (c) 2018 by Walter Stroebel and InfComTec.
 */
package nl.infcomtec.jk8sctl.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import nl.infcomtec.jk8sctl.Global;
import nl.infcomtec.jk8sctl.K8sCtlCfg;
import org.yaml.snakeyaml.Yaml;

/**
 *
 * @author walter
 */
public class YamlEditor extends javax.swing.JFrame {

    private String clipYaml;

    /**
     * Creates new form Swing
     */
    public YamlEditor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsYaml = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        butOpen = new javax.swing.JButton();
        butSave = new javax.swing.JButton();
        butClose = new javax.swing.JButton();
        butCopy = new javax.swing.JButton();
        butPaste = new javax.swing.JButton();
        butPack = new javax.swing.JButton();
        butDelete = new javax.swing.JButton();
        butRestore = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        butSaveConfig = new javax.swing.JButton();
        butResetConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JK8sCtl YAML Editor");
        setAlwaysOnTop(true);

        tabsYaml.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsYamlStateChanged(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jLabel1.setText("YAML:");
        jToolBar1.add(jLabel1);

        butOpen.setText("Open");
        butOpen.setToolTipText("Open a YAML file");
        butOpen.setFocusable(false);
        butOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOpenActionPerformed(evt);
            }
        });
        jToolBar1.add(butOpen);

        butSave.setText("Save");
        butSave.setToolTipText("Save the current tab/file");
        butSave.setEnabled(false);
        butSave.setFocusable(false);
        butSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(butSave);

        butClose.setText("Close");
        butClose.setToolTipText("Close the current tab (discard)");
        butClose.setEnabled(false);
        butClose.setFocusable(false);
        butClose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butClose.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCloseActionPerformed(evt);
            }
        });
        jToolBar1.add(butClose);

        butCopy.setText("Copy");
        butCopy.setToolTipText("Copy the current tab");
        butCopy.setEnabled(false);
        butCopy.setFocusable(false);
        butCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCopyActionPerformed(evt);
            }
        });
        jToolBar1.add(butCopy);

        butPaste.setText("Paste");
        butPaste.setToolTipText("Paste into the current tab");
        butPaste.setEnabled(false);
        butPaste.setFocusable(false);
        butPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(butPaste);

        butPack.setText("Pack");
        butPack.setToolTipText("Discard comments and pack");
        butPack.setEnabled(false);
        butPack.setFocusable(false);
        butPack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butPack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butPack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPackActionPerformed(evt);
            }
        });
        jToolBar1.add(butPack);

        butDelete.setText("Delete");
        butDelete.setToolTipText("Delete the file");
        butDelete.setEnabled(false);
        butDelete.setFocusable(false);
        butDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(butDelete);

        butRestore.setText("Restore");
        butRestore.setFocusable(false);
        butRestore.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butRestore.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRestoreActionPerformed(evt);
            }
        });
        jToolBar1.add(butRestore);
        jToolBar1.add(jSeparator1);

        jLabel2.setText("Config:");
        jToolBar1.add(jLabel2);

        butSaveConfig.setText("Save");
        butSaveConfig.setFocusable(false);
        butSaveConfig.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butSaveConfig.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveConfigActionPerformed(evt);
            }
        });
        jToolBar1.add(butSaveConfig);

        butResetConfig.setText("Reset");
        butResetConfig.setFocusable(false);
        butResetConfig.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        butResetConfig.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        butResetConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butResetConfigActionPerformed(evt);
            }
        });
        jToolBar1.add(butResetConfig);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabsYaml, javax.swing.GroupLayout.DEFAULT_SIZE, 723, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tabsYaml, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public YamlFile currentYaml() {
        if (tabsYaml.getSelectedIndex() >= 0) {
            if (tabsYaml.getSelectedComponent() instanceof YamlFile) {
                return (YamlFile) tabsYaml.getSelectedComponent();
            }
        }
        return null;
    }

    private void tabsYamlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsYamlStateChanged
        YamlFile sel = currentYaml();
        if (null == sel) {
            butClose.setEnabled(false);
            butCopy.setEnabled(false);
            butDelete.setEnabled(false);
            butPack.setEnabled(false);
            butPaste.setEnabled(false);
            butSave.setEnabled(false);
        } else {
            butClose.setEnabled(true);
            butCopy.setEnabled(true);
            butDelete.setEnabled(true);
            butPack.setEnabled(true);
            butPaste.setEnabled(null != clipYaml);
            butSave.setEnabled(true);
        }
    }//GEN-LAST:event_tabsYamlStateChanged

    private void butOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOpenActionPerformed
        JFileChooser jfc = new JFileChooser(Global.workDir);
        jfc.setCurrentDirectory(Global.getYamlDir());
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith(".yml") || f.getName().toLowerCase().endsWith(".yaml");
            }

            @Override
            public String getDescription() {
                return "YAML files";
            }
        });
        int showOpenDialog = jfc.showOpenDialog(this);
        if (JFileChooser.APPROVE_OPTION == showOpenDialog) {
            Global.setYamlDir(jfc.getSelectedFile().getParentFile());
            YamlFile yamlFile = new YamlFile(jfc.getSelectedFile());
            tabsYaml.addTab(yamlFile.src.getName(), yamlFile);
            butClose.setEnabled(true);
            butCopy.setEnabled(true);
            butPack.setEnabled(true);
            butPaste.setEnabled(null != clipYaml);
            butSave.setEnabled(true);
        }
    }//GEN-LAST:event_butOpenActionPerformed

    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        try {
            sel.backup();
            {
                // test-parse the Yaml
                Yaml yaml = new Yaml();
                Iterable<Object> loadAll = yaml.loadAll(sel.jta.getText());
                try (StringWriter sw = new StringWriter()) {
                    yaml.dumpAll(loadAll.iterator(), sw);
                }
            }
            try (FileWriter sw = new FileWriter(sel.src)) {
                sw.write(sel.jta.getText().trim() + "\n");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
        }
    }//GEN-LAST:event_butSaveActionPerformed

    private void butCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCloseActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        tabsYaml.remove(tabsYaml.getSelectedIndex());
    }//GEN-LAST:event_butCloseActionPerformed

    private void butCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCopyActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        clipYaml = sel.jta.getText();
        butPaste.setEnabled(true);
    }//GEN-LAST:event_butCopyActionPerformed

    private void butPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPasteActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        StringBuilder join = new StringBuilder(sel.jta.getText());
        join.append("\n---\n");
        join.append(clipYaml);
        sel.jta.setText(join.toString());
    }//GEN-LAST:event_butPasteActionPerformed

    private void butPackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPackActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        try {
            Yaml yaml = new Yaml();
            Iterable<Object> loadAll = yaml.loadAll(sel.jta.getText());
            try (StringWriter sw = new StringWriter()) {
                yaml.dumpAll(loadAll.iterator(), sw);
                sel.jta.setText(sw.toString() + "\n");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
        }
    }//GEN-LAST:event_butPackActionPerformed

    private void butSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveConfigActionPerformed
        try {
            Global.getConfig().saveConfig();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
            Logger.getLogger(YamlEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_butSaveConfigActionPerformed

    private void butResetConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butResetConfigActionPerformed
        try {
            K8sCtlCfg.defaults().saveConfig();
            Global.loadConfig();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
        }
    }//GEN-LAST:event_butResetConfigActionPerformed

    private void butDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleteActionPerformed
        YamlFile sel = currentYaml();
        if (null == sel) {
            return;
        }
        try {
            sel.backup();
            sel.src.delete();
            butCloseActionPerformed(evt);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString());
        }
    }//GEN-LAST:event_butDeleteActionPerformed

    private void butRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRestoreActionPerformed
        JFileChooser jfc = new JFileChooser(Global.workDir);
        jfc.setCurrentDirectory(Global.getYamlDir());
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".bak");
            }

            @Override
            public String getDescription() {
                return "Backup files";
            }
        });
        int showOpenDialog = jfc.showOpenDialog(this);
        if (JFileChooser.APPROVE_OPTION == showOpenDialog) {
            Global.setYamlDir(jfc.getSelectedFile().getParentFile());
            YamlFile yamlFile = new YamlFile(jfc.getSelectedFile());
            String oldName = yamlFile.src.getAbsolutePath();
            yamlFile.src = new File(oldName.replace(".bak", ".yml"));
            tabsYaml.addTab(yamlFile.src.getName(), yamlFile);
            butSaveActionPerformed(evt);
            butClose.setEnabled(true);
            butCopy.setEnabled(true);
            butPack.setEnabled(true);
            butPaste.setEnabled(null != clipYaml);
            butSave.setEnabled(true);
        }
    }//GEN-LAST:event_butRestoreActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YamlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YamlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YamlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YamlEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new YamlEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butClose;
    private javax.swing.JButton butCopy;
    private javax.swing.JButton butDelete;
    private javax.swing.JButton butOpen;
    private javax.swing.JButton butPack;
    private javax.swing.JButton butPaste;
    private javax.swing.JButton butResetConfig;
    private javax.swing.JButton butRestore;
    private javax.swing.JButton butSave;
    private javax.swing.JButton butSaveConfig;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTabbedPane tabsYaml;
    // End of variables declaration//GEN-END:variables
}
